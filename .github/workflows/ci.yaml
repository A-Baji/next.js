name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - canary
jobs:
  build-and-publish:
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'closed' && contains(github.event.pull_request.base.ref, 'canary')) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/canary')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{secrets.SSH_PRIVATE_KEY}}
          submodules: true
      - name: Build Images
        run: docker-compose -f ./with-docker-compose-app/docker-compose.prod.yml build
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Push Image
        run: docker-compose -f ./with-docker-compose-app/docker-compose.prod.yml push
  # lint-sources:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Node modules cache
  #       uses: actions/cache@v3
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-ci-npm-${{ hashFiles('**/package-lock.json') }}

  #     - name: Run npm install --frozen-lockfile
  #       run: npm install --frozen-lockfile

  #     - name: Run npm run lint
  #       run: npm run lint

  # build:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Node modules cache
  #       uses: actions/cache@v3
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-ci-npm-${{ hashFiles('**/package-lock.json') }}

  #     - name: Run npm install --frozen-lockfile
  #       run: npm install --frozen-lockfile

  #     - name: Run NODE_ENV=test npm run build:nolint
  #       run: NODE_ENV=test npm run build:nolint

  #     - name: Archive next-env.d.ts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: next-env.d.ts
  #         path: next-env.d.ts

  #     - name: Archive .next
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: .next
  #         path: .next

  # compile-typescript:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Node modules cache
  #       uses: actions/cache@v3
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-ci-npm-${{ hashFiles('**/package-lock.json') }}

  #     - name: Download next-env.d.ts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: next-env.d.ts

  #     - name: Run npm install --frozen-lockfile
  #       run: npm install --frozen-lockfile

  #     - name: Run tsc
  #       run: npm run tsc

  # run-unit-tests:
  #   name: run-unit-tests (${{ matrix.shard }}/${{ strategy.job-total }})
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   env:
  #     CI: true
  #   strategy:
  #     matrix:
  #       # e.g. [1, 2, 3] for three shards
  #       shard: [1]
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Node modules cache
  #       uses: actions/cache@v3
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-ci-npm-${{ hashFiles('**/package-lock.json') }}

  #     - name: Run npm install --frozen-lockfile
  #       run: npm install --frozen-lockfile

  #     - name: Run npx jest test --ci --passWithNoTests --shard=${{ matrix.shard }}/${{ strategy.job-total }}
  #       run: npx jest test --ci --passWithNoTests --shard=${{ matrix.shard }}/${{ strategy.job-total }}

  # run-e2e-tests:
  #   needs: build
  #   name: run-e2e-tests (${{ matrix.shard }}/${{ strategy.job-total }})
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   env:
  #     CI: true
  #     NODE_ENV: test
  #   strategy:
  #     matrix:
  #       # e.g. [1, 2, 3] for three shards
  #       shard: [1]
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Node modules cache
  #       uses: actions/cache@v3
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-ci-npm-${{ hashFiles('**/package-lock.json') }}

  #     - name: Run npm install --frozen-lockfile
  #       run: npm install --frozen-lockfile

  #     - name: Download build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: .next
  #         path: .next

  #     - name: Run npm run test:e2e:prepare
  #       run: npm run test:e2e:prepare

  #     - name: Run npm run test:e2e -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}
  #       run: npm run test:e2e -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}
